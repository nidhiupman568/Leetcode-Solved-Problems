class Solution {
private:
    int dp[101][201];
    int sum[101];

    int dfs(int i, int M, int n) {
        if (i == n) return 0;
        if (2 * M >= n - i) return sum[n] - sum[i];
        if (dp[i][M]) return dp[i][M];

        int res = 0;
        for (int x = 1; x <= 2 * M && i + x <= n; ++x) {
            res = max(res, sum[n] - sum[i] - dfs(i + x, max(M, x), n));
        }
        return dp[i][M] = res;
    }

public:
    int stoneGameII(vector<int>& piles) {
        int n = piles.size();
        memset(dp, 0, sizeof(dp));
        sum[0] = 0;
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + piles[i];
        }
        return dfs(0, 1, n);
    }
};
