#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    int minimumIndex(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, int> freq;

        // Step 1: Find the dominant element
        for (int num : nums) {
            freq[num]++;
        }

        int dominant = -1;
        for (auto& it : freq) {
            if (it.second > n / 2) {
                dominant = it.first;
                break;
            }
        }

        // Step 2: Check for valid split
        int leftCount = 0;
        int rightCount = freq[dominant];
        
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == dominant) {
                leftCount++;
                rightCount--;
            }
            
            if (leftCount * 2 > i + 1 && rightCount * 2 > n - i - 1) {
                return i;
            }
        }
        return -1;
    }
};
