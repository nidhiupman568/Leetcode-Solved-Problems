class Solution {
public:
    int maxMoves(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> dp(m, vector<bool>(n, false));
        
        // Initialize first column - all cells can be starting points
        for(int i = 0; i < m; i++) {
            dp[i][0] = true;
        }
        
        int maxCol = 0;
        
        // Process column by column
        for(int j = 0; j < n-1; j++) {
            bool moved = false;
            for(int i = 0; i < m; i++) {
                if(!dp[i][j]) continue;
                
                // Check all three possible moves
                for(int k = max(0, i-1); k <= min(m-1, i+1); k++) {
                    if(grid[k][j+1] > grid[i][j]) {
                        if(!dp[k][j+1]) {
                            dp[k][j+1] = true;
                            moved = true;
                        }
                    }
                }
            }
            if(moved) maxCol = j + 1;
        }
        
        return maxCol;
    }
};
